<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function embederator_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
      // Main module help for the embed_image_style_permissions module.
      case 'help.page.embederator':
        $output = '';
        $output .= '<h3>' . t('About') . '</h3>';
        $output .= '<p>' . t('Create and manage third-party embeds') . '</p>';
        return $output;
  
      default:
    }
  }

/**
 * Implements hook_theme().
 */
function embederator_theme() {
    return [
      'embederator' => [
        'render element' => 'elements',
        'file' => 'embederator.theme.inc',
      ],
      'embederator_add_list' => [
        'variables' => ['content' => NULL],
      ],
    ];
}

/**
 * Prepares variables for list of available embderator type templates.
 *
 * Default template: embederator-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of embederator types.
 *
 * @see node_add_page()
 */
function template_preprocess_embederator_add_list(&$variables) {
  $variables['types'] = [];
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => \Drupal::l($type->label(), new Url('embederator.add', ['embederator_type' => $type->id()])),
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function embederator_theme_suggestions_embederator_alter(array &$suggestions, array $variables, $hook) {
    $type = $variables['elements']['#embederator']->bundle();
    
    // add a suggestion for the bundle
    $suggestions[] = $hook . '__' . $type;
}
